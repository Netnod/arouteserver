{% from 'macros.j2' import write_prefix_list %}
{% from 'macros.j2' import write_prefix_list_entry %}
{% from 'macros.j2' import write_prefixset_list %}
{% from 'macros.j2' import write_community %}
{% from 'macros.j2' import as_path_match %}
{% from 'macros.j2' import write_aspath_list %}

# ---------------------------------------------------------
# FILTERS

policy-definitions:
  - name: default-export
    statements:
      - name: Reject export-bogons-IPV4
        conditions:
          match-prefix-set:
            prefix-set: "generic-bogons-IPV4"
            match-set-options: "any"
        actions:
          route-disposition : "reject-route"
      - name: Reject export-bogons-IPV6
        conditions:
          match-prefix-set:
            prefix-set: "generic-bogons-IPV6"
            match-set-options: "any"
        actions:
          route-disposition : "reject-route"
      - name: Reject route community
        conditions:
          bgp-conditions:
            match-community-set:
              community-set: "do_not_announce_to_any"
        actions:
          route-disposition: "reject-route"

  - name: default-import
    statements:
      - name: Reject import-bogons-IPV4
        conditions:
          match-prefix-set:
            prefix-set: "generic-bogons-IPV4"
            match-set-options: "any"
        actions:
          route-disposition : "reject-route"
      - name: Reject import-bogons-IPV6
        conditions:
          match-prefix-set:
            prefix-set: "generic-bogons-IPV6"
            match-set-options: "any"
        actions:
          route-disposition : "reject-route"

{% for asn in clients|map(attribute='asn')|unique|list %}
{% set client = get_client_from_asn(asn) %}
  - name: as{{ asn }}-import
    statements:
{%      for as_set_bundle_id in client.cfg.filtering.irrdb.as_set_bundle_ids|sort %}
{%        set as_set_bundle = irrdb_info[as_set_bundle_id] %}
      - name: Reject if ASPath not in AS-SET-{{ as_set_bundle.name }}_ASNs
        conditions:
          bgp-conditions:
            match-as-path-set:
              as-path-set: "AS-SET-{{ as_set_bundle.name }}_ASNs"
              match-set-options: "invert"
        actions:
          route-disposition: "reject-route"
{% endfor %}

{%      for as_set_bundle_id in client.cfg.filtering.irrdb.as_set_bundle_ids|sort %}
{%        set as_set_bundle = irrdb_info[as_set_bundle_id] %}
      - name: Reject PREFIXES not in AS-SET-{{ as_set_bundle.name }}_IPV4_PREFIXES
        conditions:
          match-prefix-set:
            prefix-set: "AS-SET-{{ as_set_bundle.name }}_IPV4_PREFIXES"
            match-set-options: "invert"
        actions:
          route-disposition: "reject-route"
      - name: Reject PREFIXES not in AS-SET-{{ as_set_bundle.name }}_IPV6_PREFIXES
        conditions:
          match-prefix-set:
            prefix-set: "AS-SET-{{ as_set_bundle.name }}_IPV6_PREFIXES"
            match-set-options: "invert"
        actions:
          route-disposition: "reject-route"
{% endfor %}

      - name: Allow only the peering ASN as first ASN
        conditions:
          bgp-conditions:
            match-as-path-set:
              as-path-set: "AS{{ asn }}-first"
              match-set-options: invert
        actions:
          route-disposition: "reject-route"

      ## Communities
      {% if community_is_set("prepend_once_to_any","lrg") %}
      - name: Prepend once
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_once_to_any"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 1
      {% endif %}
      {% if community_is_set("prepend_twice_to_any","lrg") %}
      - name: Prepend twice
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_twice_to_any"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 2
      {% endif %}
      {% if community_is_set("prepend_thrice_to_any","lrg") %}
      - name: Prepend thrice
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_thrice_to_any"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 3
      {% endif %}

  - name: as{{ asn }}-export
    statements:
    {% if community_is_set("announce_to_peer","std") %}
      - conditions:
          bgp-conditions:
            match-community-set:
              community-set: "announce_to_peer_as{{asn}}"
        actions:
          route-disposition: "accept-route"
    {% endif %}

      ## Communities
      {% if community_is_set("prepend_once_to_peer","lrg") %}
      - name: Prepend once to {{asn}}
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_once_to_peer_as{{asn}}"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 1
      {% endif %}
      {% if community_is_set("prepend_twice_to_peer","lrg") %}
      - name: Prepend twice to {{asn}}
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_twice_to_peer_as{{asn}}"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 2
      {% endif %}
      {% if community_is_set("prepend_thrice_to_peer","lrg") %}
      - name: Prepend thrice to {{asn}}
        conditions:
          bgp-conditions:
            match-large-community-set:
              large-community-set: "prepend_thrice_to_peer_as{{asn}}"
              match-set-options: "any"
        actions:
          bgp-actions:
            set-as-path-prepend:
              as: "last-as"
              repeat-n: 3
      {% endif %}

      - conditions:
          bgp-conditions:
            match-community-set:
              community-set: "do_not_announce_to_any"
        actions:
            route-disposition: "reject-route"
{% endfor %}

defined-sets:
{#
------------------------------------------
  Prefix sets
------------------------------------------
#}
  prefix-sets:
    - prefix-set-name: "generic-bogons-IPV4"
      prefix-list:
      {{write_prefixset_list(bogons,4)|indent(6,false)}}
    - prefix-set-name: "generic-bogons-IPV6"
      prefix-list:
      {{write_prefixset_list(bogons,6)|indent(6,false)}}

{% for as_set_bundle_id in irrdb_info|sort %}
{%    set as_set_bundle = irrdb_info[as_set_bundle_id] %}
{%    if as_set_bundle.prefixes|length > 0 %}
    - prefix-set-name: "AS-SET-{{ as_set_bundle.name }}_IPV4_PREFIXES"
      prefix-list:
      {{ write_prefixset_list(as_set_bundle.prefixes, 4)|indent(6, False) }}
    - prefix-set-name: "AS-SET-{{ as_set_bundle.name }}_IPV6_PREFIXES"
      prefix-list:
      {{ write_prefixset_list(as_set_bundle.prefixes, 4)|indent(6, False) }}
{%    endif %}
{%- endfor %}
{#
------------------------------------------
  BGP Sets
------------------------------------------
#}
  bgp-defined-sets:
  {#
  ------------------------------------------
    AS-Paths Sets
  ------------------------------------------
  #}
    as-path-sets:
{% for client in clients|sort(attribute="asn") %}
      - as-path-set-name: "AS{{client.asn}}-first"
        as-path-list: ["^{{client.asn}}"]
{% endfor %}
{% for as_set_bundle_id in irrdb_info|sort %}
{%    set as_set_bundle = irrdb_info[as_set_bundle_id] %}
{%    if as_set_bundle.asns|length > 0 %}
      - as-path-set-name: "AS-SET-{{ as_set_bundle.name }}_ASNs"
        as-path-list:
        {{ write_aspath_list(as_set_bundle.asns|sort)|indent(8, False) }}
{% endif %}
{%- endfor %}
{#
------------------------------------------
  Standard community lists
------------------------------------------
#}
  {% if get_communities("std").items()|length > 0 %}
    community-sets:
  {% for (name, community) in get_communities("std").items() %}
    {{ write_community("community", name, community, clients=clients)|indent(4, False) }}
  {%- endfor %}
  {% endif -%}
{#
------------------------------------------
  Large community lists
------------------------------------------
#}
  {% if get_communities("lrg").items()|length > 0 %}
    large-community-sets:
  {% for (name, community) in get_communities("lrg").items() %}
    {{ write_community("large-community", name, community, clients=clients)|indent(4, False) }}
  {%- endfor %}
  {% endif -%}

{#
------------------------------------------
  Extended community lists
------------------------------------------
#}
  {% if get_communities("ext").items()|length > 0 %}
    ext-community-sets:
  {% for (name, community) in get_communities("ext").items() %}
    {{ write_community("ext-community", name, community, clients=clients)|indent(4, False) }}
  {%- endfor %}
  {% endif -%}